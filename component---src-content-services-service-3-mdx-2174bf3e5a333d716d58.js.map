{"version":3,"file":"component---src-content-services-service-3-mdx-2174bf3e5a333d716d58.js","mappings":"8NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,KAAM,KAAM,uCAAwCA,EAAAA,cAAoB,IAAK,KAAM,+DAAgEA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,0BAA2BA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,8GAA+GG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,mRAAoRG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,2QAA4QG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,8SAA+SG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,oWAAqWG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,6SAChgE,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECeA,MAAMU,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://@direct-hearing-aid-service-workspace/gatsby-webapp/./src/content/services/service-3.mdx","webpack://@direct-hearing-aid-service-workspace/gatsby-webapp/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"What is Class 3 Hearing Aid Repair?\"), React.createElement(\"p\", null, \" Class 3 Hearing Aid Repair includes the following options:\"), React.createElement(\"ul\", null, React.createElement(\"li\", null, \"Class 1 (Basic Repair)\"), React.createElement(\"li\", null, React.createElement(_components.p, null, \"Replacement of damge mold (shell) Current Impression needed (Using\\nexisiting faceplate and electronics)\"))), React.createElement(\"p\", null, React.createElement(_components.p, null, \"How is this done? A block (usually consisting of cotton or rubber) is\\ninserted into the ear canal (including a removal string), and through\\nthe use of a syringe, the prepared material is injected into the canal\\nand concha, allowed time to harden, and is then removed.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"The finished impression is then submitted to an earmold lab which begins\\nthe process of manufacturing a shell by making a mold of the impression\\nand then casting a plastic replica of the ear. This becomes what is\\ncalled the shell of a Custom-Made Hearing Aid.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"The faceplate is a separate pre-finished plastic part which is then\\nbonded to the finished shell. The faceplate, which holds the appropriate\\nelectronic components including the battery door, microphone and volume\\ncontrol, is not custom-made but is modified and adapted to fit the\\ncustom shell.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"The placement of all switches or buttons on a Faceplate is critical\\nsince they have to be operated or activated by the use of a finger and\\nit is important that the hearing aid user can find and activate the\\nvarious devices by touch. The Replacement of such switches and devices\\nis usually accomplished under the Class 1 Electronic Repair Services.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"The faceplate may also have to be replaced due to Physical Damage or\\nAbuse, or from the plastic cracking or otherwise being damaged and\\nunserviceable. A damaged faceplate prevents the separating and opening\\nof the faceplate from the shell, required in all Servicing of the\\nHearing Aid itself.\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}