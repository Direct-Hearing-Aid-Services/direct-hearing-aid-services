{"version":3,"file":"component---src-content-services-service-4-mdx-77e4dd16e5e428bf407c.js","mappings":"6NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,KAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,KAAM,KAAM,uCAAwCA,EAAAA,cAAoB,IAAK,KAAM,+DAAgEA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,yBAA0BA,EAAAA,cAAoB,KAAM,KAAM,kCAAmCA,EAAAA,cAAoB,KAAM,KAAM,iDAAkDA,EAAAA,cAAoB,KAAM,KAAM,kCAAmCA,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,uHAAwHG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,kLAAmLG,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,yDAA0DA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,wFAAyFG,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,6EAA8EG,EAAAA,cAAoB,KAAM,KAAM,sDAAuDA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,gJAAiJG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,yMAA0MG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,ySAA0SG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,ogBAAqgBG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,mLAAoLG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,obAAqbG,EAAAA,cAAoB,IAAK,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,kRACprH,CAKA,UAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,KAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECeA,MAAMU,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://@direct-hearing-aid-service-workspace/gatsby-webapp/./src/content/services/service-4.mdx","webpack://@direct-hearing-aid-service-workspace/gatsby-webapp/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"What is Class 4 Hearing Aid Repair?\"), React.createElement(\"p\", null, \" Class 4 Hearing Aid Repair consist of the follong options:\"), React.createElement(\"ul\", null, React.createElement(\"li\", null, \"Upgrading electronics\"), React.createElement(\"li\", null, \"Convert from analog to digital\"), React.createElement(\"li\", null, \"Reprogram to current audiogram (Hearing Test)\"), React.createElement(\"li\", null, \"Option to change battery size\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"Serious consideration should be given to all the options available in\\nthe event the Faceplate has to be replaced.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"Any time a new faceplate is required, for any reason, it is strongly\\nrecommended that a current Audiogram (hearing test) be submitted with\\nthe request for repair services.\")), React.createElement(\"ul\", null, React.createElement(\"li\", null, \"An upgrade to the existing analog circuit (more gain)\"), React.createElement(\"li\", null, React.createElement(_components.p, null, \"An upgrade to the existing analog circuit to programmable analog\\nsignal processing\")), React.createElement(\"li\", null, React.createElement(_components.p, null, \"An upgrade to the existing digital circuit to a current digital\\ncircuit\")), React.createElement(\"li\", null, \"They choose to because of a change in hearing loss\"), React.createElement(\"li\", null, React.createElement(_components.p, null, \"The desire to make changes or modifications at their discretion for\\nimprovement, convenience of usage, or better hearing aid performance.\"))), React.createElement(\"p\", null, React.createElement(_components.p, null, \"When a New Faceplate is installed, unless otherwise stated, all New\\nElectronics are installed, and the only part of the existing hearing aid\\nused is the Shell and usually the same serial number.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"Installing a new faceplate provides the opportunity to change the\\ninternal components of like type (either Analog or Digital) to\\ncompensate or allow for more gain (power) or other features. Features\\nsuch as Switches or Buttons can be added or removed at the time of\\nFaceplate replacement.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"Usually depending upon availability or costs, the user may choose to\\nupgrade the Circuit and Components to allow for changes in the\\nperformance of the hearing aid through the use of a Computer. The user\\nmay choose to upgrade the existing hearing aidâ€™s electronics to Digital\\nSignal Processing for enhanced benefits to the existing hearing aid. The\\nuser may also choose to upgrade the existing Digital Circuit for\\nimproved hearing or tolerance, performance, or for more convenient and\\ninexpensive service.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"The user, owner, or caretaker, may choose to change an existing private\\nlabel, or brand of hearing aid circuit, because of Limited and\\nNon-Competitive Service Availability.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"In such an event, the hearing aid user has the option to choose to have\\nthe existing electronics transferred from the damaged faceplate, and\\nreused, or to use this opportunity to upgrade the electronics to either\\ndifferent and stronger components (to compensate for a change in hearing\\nloss), to add or remove aforementioned Switches and Features, or to\\nconvert the existing hearing aid to Analog or Digital Signal Processing.\")), React.createElement(\"p\", null, React.createElement(_components.p, null, \"Since Brands such as all the major PRIVATE LABELS in the hearing aid\\nindustry, do not make their PROPRIETY SOFTWARE available to non-member\\nDealers, such hearing aids can only be serviced and programmed by the\\nAUTHORIZED FRANCHISE DEALERS and not the GENERAL PUBLIC.\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}