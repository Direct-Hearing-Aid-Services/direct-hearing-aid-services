{"version":3,"file":"component---src-content-services-service-5-mdx-95ec01a1bc39c143e059.js","mappings":"6NAGA,SAASA,EAAkBC,GACzB,OAAOC,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoB,KAAM,KAAM,uCAAwCA,EAAAA,cAAoB,IAAK,KAAM,8DAA+DA,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,KAAM,KAAM,8DAA+DA,EAAAA,cAAoB,KAAM,KAAM,6BAA8BA,EAAAA,cAAoB,KAAM,KAAM,+DAAgEA,EAAAA,cAAoB,KAAM,KAAM,kDAC7gB,CAKA,UAJA,SAAoBD,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOE,QAASC,GAAaC,OAAOC,OAAO,CAAC,GAAGC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOJ,EAAYF,EAAAA,cAAoBE,EAAWH,EAAOC,EAAAA,cAAoBF,EAAmBC,IAAUD,GAC5G,C,qECkBA,MAAMS,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBH,GAC/B,MAAMI,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfF,EACFA,EAAWI,GAGb,IAAIA,KAAsBJ,EACnC,GACA,CAACI,EAAmBJ,GAExB,C","sources":["webpack://@direct-hearing-aid-service-workspace/gatsby-webapp/./src/content/services/service-5.mdx","webpack://@direct-hearing-aid-service-workspace/gatsby-webapp/../../node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  return React.createElement(\"div\", null, React.createElement(\"h1\", null, \"What is Class 5 Hearing Aid Repair?\"), React.createElement(\"p\", null, \"Class 5 Hearing Aid Repair includes the following options:\"), React.createElement(\"ul\", null, React.createElement(\"li\", null, \"When the hearing aid is beyond repair (Damage Hearing aid)\"), React.createElement(\"li\", null, \"Class 4 repair (Upgraded)\"), React.createElement(\"li\", null, \"Replacement of damge mold (shell) Current Impression needed\"), React.createElement(\"li\", null, \"Reprogram to current audiogram (Hearing Test)\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","React","wrapper","MDXLayout","Object","assign","_provideComponents","components","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}